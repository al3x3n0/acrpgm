// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Resolvers
{
    using System;

    public class GeneratedResolver : global::MessagePack.IFormatterResolver
    {
        public static readonly global::MessagePack.IFormatterResolver Instance = new GeneratedResolver();

        private GeneratedResolver()
        {
        }

        public global::MessagePack.Formatters.IMessagePackFormatter<T> GetFormatter<T>()
        {
            return FormatterCache<T>.Formatter;
        }

        private static class FormatterCache<T>
        {
            internal static readonly global::MessagePack.Formatters.IMessagePackFormatter<T> Formatter;

            static FormatterCache()
            {
                var f = GeneratedResolverGetFormatterHelper.GetFormatter(typeof(T));
                if (f != null)
                {
                    Formatter = (global::MessagePack.Formatters.IMessagePackFormatter<T>)f;
                }
            }
        }
    }

    internal static class GeneratedResolverGetFormatterHelper
    {
        private static readonly global::System.Collections.Generic.Dictionary<Type, int> lookup;

        static GeneratedResolverGetFormatterHelper()
        {
            lookup = new global::System.Collections.Generic.Dictionary<Type, int>(68)
            {
                { typeof(global::System.Collections.Generic.List<global::AlienCell.Shared.Data.HeroWeaponSlotData.Types>), 0 },
                { typeof(global::System.Collections.Generic.List<global::AlienCell.Shared.Data.SkillData.Types>), 1 },
                { typeof(global::System.Collections.Generic.List<global::AlienCell.Shared.Protocol.Models.ArtifactModelDTO>), 2 },
                { typeof(global::System.Collections.Generic.List<global::AlienCell.Shared.Protocol.Models.BuildingModelDTO>), 3 },
                { typeof(global::System.Collections.Generic.List<global::AlienCell.Shared.Protocol.Models.HeroModelDTO>), 4 },
                { typeof(global::System.Collections.Generic.List<global::AlienCell.Shared.Protocol.Models.WeaponModelDTO>), 5 },
                { typeof(global::System.Collections.Generic.List<global::AlienCell.Shared.Structs.ArtifactLevelLadderData>), 6 },
                { typeof(global::System.Collections.Generic.List<global::AlienCell.Shared.Structs.HeroLevelLadderData>), 7 },
                { typeof(global::System.Collections.Generic.List<global::AlienCell.Shared.Structs.WeaponLevelLadderData>), 8 },
                { typeof(global::System.Collections.Generic.List<string>), 9 },
                { typeof(global::AlienCell.Shared.Data.AffinityData.Types), 10 },
                { typeof(global::AlienCell.Shared.Data.ArtifactData.Types), 11 },
                { typeof(global::AlienCell.Shared.Data.ArtifactLadderData.Types), 12 },
                { typeof(global::AlienCell.Shared.Data.HeroClassData.Types), 13 },
                { typeof(global::AlienCell.Shared.Data.HeroData.Types), 14 },
                { typeof(global::AlienCell.Shared.Data.HeroLadderData.Types), 15 },
                { typeof(global::AlienCell.Shared.Data.HeroWeaponSlotData.Types), 16 },
                { typeof(global::AlienCell.Shared.Data.QualityData.Types), 17 },
                { typeof(global::AlienCell.Shared.Data.SkillData.Types), 18 },
                { typeof(global::AlienCell.Shared.Data.WeaponData.Types), 19 },
                { typeof(global::AlienCell.Shared.Data.WeaponLadderData.Types), 20 },
                { typeof(global::AlienCell.Shared.Data.AchievementData), 21 },
                { typeof(global::AlienCell.Shared.Data.AffinityData), 22 },
                { typeof(global::AlienCell.Shared.Data.ArtifactData), 23 },
                { typeof(global::AlienCell.Shared.Data.ArtifactLadderData), 24 },
                { typeof(global::AlienCell.Shared.Data.ArtifactUpgradeMaterialData), 25 },
                { typeof(global::AlienCell.Shared.Data.BuildingData), 26 },
                { typeof(global::AlienCell.Shared.Data.CurrencyData), 27 },
                { typeof(global::AlienCell.Shared.Data.ExpeditionData), 28 },
                { typeof(global::AlienCell.Shared.Data.FactionData), 29 },
                { typeof(global::AlienCell.Shared.Data.HeroClassData), 30 },
                { typeof(global::AlienCell.Shared.Data.HeroData), 31 },
                { typeof(global::AlienCell.Shared.Data.HeroLadderData), 32 },
                { typeof(global::AlienCell.Shared.Data.HeroSkinData), 33 },
                { typeof(global::AlienCell.Shared.Data.HeroUpgradeMaterialData), 34 },
                { typeof(global::AlienCell.Shared.Data.HeroWeaponSlotData), 35 },
                { typeof(global::AlienCell.Shared.Data.QualityData), 36 },
                { typeof(global::AlienCell.Shared.Data.SkillData), 37 },
                { typeof(global::AlienCell.Shared.Data.WeaponData), 38 },
                { typeof(global::AlienCell.Shared.Data.WeaponLadderData), 39 },
                { typeof(global::AlienCell.Shared.Data.WeaponUpgradeMaterialData), 40 },
                { typeof(global::AlienCell.Shared.Protocol.ChatMessageResponse), 41 },
                { typeof(global::AlienCell.Shared.Protocol.GetChallengeRequest), 42 },
                { typeof(global::AlienCell.Shared.Protocol.GetChallengeResponse), 43 },
                { typeof(global::AlienCell.Shared.Protocol.JoinChatRoomRequest), 44 },
                { typeof(global::AlienCell.Shared.Protocol.Models.AccountDTO), 45 },
                { typeof(global::AlienCell.Shared.Protocol.Models.ArtifactModelDTO), 46 },
                { typeof(global::AlienCell.Shared.Protocol.Models.BuildingModelDTO), 47 },
                { typeof(global::AlienCell.Shared.Protocol.Models.HeroModelDTO), 48 },
                { typeof(global::AlienCell.Shared.Protocol.Models.UserModelDTO), 49 },
                { typeof(global::AlienCell.Shared.Protocol.Models.WeaponModelDTO), 50 },
                { typeof(global::AlienCell.Shared.Protocol.RegisterAccountRequest), 51 },
                { typeof(global::AlienCell.Shared.Protocol.RegisterAccountResponse), 52 },
                { typeof(global::AlienCell.Shared.Protocol.UpdateAccountRequest), 53 },
                { typeof(global::AlienCell.Shared.Protocol.UpdateAccountResponse), 54 },
                { typeof(global::AlienCell.Shared.Protocol.ValidateChallengeRequest), 55 },
                { typeof(global::AlienCell.Shared.Protocol.ValidateChallengeResponse), 56 },
                { typeof(global::AlienCell.Shared.Structs.ArtifactLevelLadderData), 57 },
                { typeof(global::AlienCell.Shared.Structs.CostArtifact), 58 },
                { typeof(global::AlienCell.Shared.Structs.CostBuilding), 59 },
                { typeof(global::AlienCell.Shared.Structs.CostHero), 60 },
                { typeof(global::AlienCell.Shared.Structs.CostWeapon), 61 },
                { typeof(global::AlienCell.Shared.Structs.HeroLevelLadderData), 62 },
                { typeof(global::AlienCell.Shared.Structs.RewardArtifact), 63 },
                { typeof(global::AlienCell.Shared.Structs.RewardHero), 64 },
                { typeof(global::AlienCell.Shared.Structs.RewardWeapon), 65 },
                { typeof(global::AlienCell.Shared.Structs.SkillModel), 66 },
                { typeof(global::AlienCell.Shared.Structs.WeaponLevelLadderData), 67 },
            };
        }

        internal static object GetFormatter(Type t)
        {
            int key;
            if (!lookup.TryGetValue(t, out key))
            {
                return null;
            }

            switch (key)
            {
                case 0: return new global::MessagePack.Formatters.ListFormatter<global::AlienCell.Shared.Data.HeroWeaponSlotData.Types>();
                case 1: return new global::MessagePack.Formatters.ListFormatter<global::AlienCell.Shared.Data.SkillData.Types>();
                case 2: return new global::MessagePack.Formatters.ListFormatter<global::AlienCell.Shared.Protocol.Models.ArtifactModelDTO>();
                case 3: return new global::MessagePack.Formatters.ListFormatter<global::AlienCell.Shared.Protocol.Models.BuildingModelDTO>();
                case 4: return new global::MessagePack.Formatters.ListFormatter<global::AlienCell.Shared.Protocol.Models.HeroModelDTO>();
                case 5: return new global::MessagePack.Formatters.ListFormatter<global::AlienCell.Shared.Protocol.Models.WeaponModelDTO>();
                case 6: return new global::MessagePack.Formatters.ListFormatter<global::AlienCell.Shared.Structs.ArtifactLevelLadderData>();
                case 7: return new global::MessagePack.Formatters.ListFormatter<global::AlienCell.Shared.Structs.HeroLevelLadderData>();
                case 8: return new global::MessagePack.Formatters.ListFormatter<global::AlienCell.Shared.Structs.WeaponLevelLadderData>();
                case 9: return new global::MessagePack.Formatters.ListFormatter<string>();
                case 10: return new MessagePack.Formatters.AlienCell.Shared.Data.AffinityData_TypesFormatter();
                case 11: return new MessagePack.Formatters.AlienCell.Shared.Data.ArtifactData_TypesFormatter();
                case 12: return new MessagePack.Formatters.AlienCell.Shared.Data.ArtifactLadderData_TypesFormatter();
                case 13: return new MessagePack.Formatters.AlienCell.Shared.Data.HeroClassData_TypesFormatter();
                case 14: return new MessagePack.Formatters.AlienCell.Shared.Data.HeroData_TypesFormatter();
                case 15: return new MessagePack.Formatters.AlienCell.Shared.Data.HeroLadderData_TypesFormatter();
                case 16: return new MessagePack.Formatters.AlienCell.Shared.Data.HeroWeaponSlotData_TypesFormatter();
                case 17: return new MessagePack.Formatters.AlienCell.Shared.Data.QualityData_TypesFormatter();
                case 18: return new MessagePack.Formatters.AlienCell.Shared.Data.SkillData_TypesFormatter();
                case 19: return new MessagePack.Formatters.AlienCell.Shared.Data.WeaponData_TypesFormatter();
                case 20: return new MessagePack.Formatters.AlienCell.Shared.Data.WeaponLadderData_TypesFormatter();
                case 21: return new MessagePack.Formatters.AlienCell.Shared.Data.AchievementDataFormatter();
                case 22: return new MessagePack.Formatters.AlienCell.Shared.Data.AffinityDataFormatter();
                case 23: return new MessagePack.Formatters.AlienCell.Shared.Data.ArtifactDataFormatter();
                case 24: return new MessagePack.Formatters.AlienCell.Shared.Data.ArtifactLadderDataFormatter();
                case 25: return new MessagePack.Formatters.AlienCell.Shared.Data.ArtifactUpgradeMaterialDataFormatter();
                case 26: return new MessagePack.Formatters.AlienCell.Shared.Data.BuildingDataFormatter();
                case 27: return new MessagePack.Formatters.AlienCell.Shared.Data.CurrencyDataFormatter();
                case 28: return new MessagePack.Formatters.AlienCell.Shared.Data.ExpeditionDataFormatter();
                case 29: return new MessagePack.Formatters.AlienCell.Shared.Data.FactionDataFormatter();
                case 30: return new MessagePack.Formatters.AlienCell.Shared.Data.HeroClassDataFormatter();
                case 31: return new MessagePack.Formatters.AlienCell.Shared.Data.HeroDataFormatter();
                case 32: return new MessagePack.Formatters.AlienCell.Shared.Data.HeroLadderDataFormatter();
                case 33: return new MessagePack.Formatters.AlienCell.Shared.Data.HeroSkinDataFormatter();
                case 34: return new MessagePack.Formatters.AlienCell.Shared.Data.HeroUpgradeMaterialDataFormatter();
                case 35: return new MessagePack.Formatters.AlienCell.Shared.Data.HeroWeaponSlotDataFormatter();
                case 36: return new MessagePack.Formatters.AlienCell.Shared.Data.QualityDataFormatter();
                case 37: return new MessagePack.Formatters.AlienCell.Shared.Data.SkillDataFormatter();
                case 38: return new MessagePack.Formatters.AlienCell.Shared.Data.WeaponDataFormatter();
                case 39: return new MessagePack.Formatters.AlienCell.Shared.Data.WeaponLadderDataFormatter();
                case 40: return new MessagePack.Formatters.AlienCell.Shared.Data.WeaponUpgradeMaterialDataFormatter();
                case 41: return new MessagePack.Formatters.AlienCell.Shared.Protocol.ChatMessageResponseFormatter();
                case 42: return new MessagePack.Formatters.AlienCell.Shared.Protocol.GetChallengeRequestFormatter();
                case 43: return new MessagePack.Formatters.AlienCell.Shared.Protocol.GetChallengeResponseFormatter();
                case 44: return new MessagePack.Formatters.AlienCell.Shared.Protocol.JoinChatRoomRequestFormatter();
                case 45: return new MessagePack.Formatters.AlienCell.Shared.Protocol.Models.AccountDTOFormatter();
                case 46: return new MessagePack.Formatters.AlienCell.Shared.Protocol.Models.ArtifactModelDTOFormatter();
                case 47: return new MessagePack.Formatters.AlienCell.Shared.Protocol.Models.BuildingModelDTOFormatter();
                case 48: return new MessagePack.Formatters.AlienCell.Shared.Protocol.Models.HeroModelDTOFormatter();
                case 49: return new MessagePack.Formatters.AlienCell.Shared.Protocol.Models.UserModelDTOFormatter();
                case 50: return new MessagePack.Formatters.AlienCell.Shared.Protocol.Models.WeaponModelDTOFormatter();
                case 51: return new MessagePack.Formatters.AlienCell.Shared.Protocol.RegisterAccountRequestFormatter();
                case 52: return new MessagePack.Formatters.AlienCell.Shared.Protocol.RegisterAccountResponseFormatter();
                case 53: return new MessagePack.Formatters.AlienCell.Shared.Protocol.UpdateAccountRequestFormatter();
                case 54: return new MessagePack.Formatters.AlienCell.Shared.Protocol.UpdateAccountResponseFormatter();
                case 55: return new MessagePack.Formatters.AlienCell.Shared.Protocol.ValidateChallengeRequestFormatter();
                case 56: return new MessagePack.Formatters.AlienCell.Shared.Protocol.ValidateChallengeResponseFormatter();
                case 57: return new MessagePack.Formatters.AlienCell.Shared.Structs.ArtifactLevelLadderDataFormatter();
                case 58: return new MessagePack.Formatters.AlienCell.Shared.Structs.CostArtifactFormatter();
                case 59: return new MessagePack.Formatters.AlienCell.Shared.Structs.CostBuildingFormatter();
                case 60: return new MessagePack.Formatters.AlienCell.Shared.Structs.CostHeroFormatter();
                case 61: return new MessagePack.Formatters.AlienCell.Shared.Structs.CostWeaponFormatter();
                case 62: return new MessagePack.Formatters.AlienCell.Shared.Structs.HeroLevelLadderDataFormatter();
                case 63: return new MessagePack.Formatters.AlienCell.Shared.Structs.RewardArtifactFormatter();
                case 64: return new MessagePack.Formatters.AlienCell.Shared.Structs.RewardHeroFormatter();
                case 65: return new MessagePack.Formatters.AlienCell.Shared.Structs.RewardWeaponFormatter();
                case 66: return new MessagePack.Formatters.AlienCell.Shared.Structs.SkillModelFormatter();
                case 67: return new MessagePack.Formatters.AlienCell.Shared.Structs.WeaponLevelLadderDataFormatter();
                default: return null;
            }
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1649 // File name should match first type name


// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.AlienCell.Shared.Data
{
    using System;
    using System.Buffers;
    using MessagePack;

    public sealed class AffinityData_TypesFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::AlienCell.Shared.Data.AffinityData.Types>
    {
        public void Serialize(ref MessagePackWriter writer, global::AlienCell.Shared.Data.AffinityData.Types value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::AlienCell.Shared.Data.AffinityData.Types Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::AlienCell.Shared.Data.AffinityData.Types)reader.ReadInt32();
        }
    }

    public sealed class ArtifactData_TypesFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::AlienCell.Shared.Data.ArtifactData.Types>
    {
        public void Serialize(ref MessagePackWriter writer, global::AlienCell.Shared.Data.ArtifactData.Types value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::AlienCell.Shared.Data.ArtifactData.Types Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::AlienCell.Shared.Data.ArtifactData.Types)reader.ReadInt32();
        }
    }

    public sealed class ArtifactLadderData_TypesFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::AlienCell.Shared.Data.ArtifactLadderData.Types>
    {
        public void Serialize(ref MessagePackWriter writer, global::AlienCell.Shared.Data.ArtifactLadderData.Types value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::AlienCell.Shared.Data.ArtifactLadderData.Types Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::AlienCell.Shared.Data.ArtifactLadderData.Types)reader.ReadInt32();
        }
    }

    public sealed class HeroClassData_TypesFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::AlienCell.Shared.Data.HeroClassData.Types>
    {
        public void Serialize(ref MessagePackWriter writer, global::AlienCell.Shared.Data.HeroClassData.Types value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::AlienCell.Shared.Data.HeroClassData.Types Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::AlienCell.Shared.Data.HeroClassData.Types)reader.ReadInt32();
        }
    }

    public sealed class HeroData_TypesFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::AlienCell.Shared.Data.HeroData.Types>
    {
        public void Serialize(ref MessagePackWriter writer, global::AlienCell.Shared.Data.HeroData.Types value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::AlienCell.Shared.Data.HeroData.Types Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::AlienCell.Shared.Data.HeroData.Types)reader.ReadInt32();
        }
    }

    public sealed class HeroLadderData_TypesFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::AlienCell.Shared.Data.HeroLadderData.Types>
    {
        public void Serialize(ref MessagePackWriter writer, global::AlienCell.Shared.Data.HeroLadderData.Types value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::AlienCell.Shared.Data.HeroLadderData.Types Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::AlienCell.Shared.Data.HeroLadderData.Types)reader.ReadInt32();
        }
    }

    public sealed class HeroWeaponSlotData_TypesFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::AlienCell.Shared.Data.HeroWeaponSlotData.Types>
    {
        public void Serialize(ref MessagePackWriter writer, global::AlienCell.Shared.Data.HeroWeaponSlotData.Types value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::AlienCell.Shared.Data.HeroWeaponSlotData.Types Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::AlienCell.Shared.Data.HeroWeaponSlotData.Types)reader.ReadInt32();
        }
    }

    public sealed class QualityData_TypesFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::AlienCell.Shared.Data.QualityData.Types>
    {
        public void Serialize(ref MessagePackWriter writer, global::AlienCell.Shared.Data.QualityData.Types value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::AlienCell.Shared.Data.QualityData.Types Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::AlienCell.Shared.Data.QualityData.Types)reader.ReadInt32();
        }
    }

    public sealed class SkillData_TypesFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::AlienCell.Shared.Data.SkillData.Types>
    {
        public void Serialize(ref MessagePackWriter writer, global::AlienCell.Shared.Data.SkillData.Types value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::AlienCell.Shared.Data.SkillData.Types Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::AlienCell.Shared.Data.SkillData.Types)reader.ReadInt32();
        }
    }

    public sealed class WeaponData_TypesFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::AlienCell.Shared.Data.WeaponData.Types>
    {
        public void Serialize(ref MessagePackWriter writer, global::AlienCell.Shared.Data.WeaponData.Types value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::AlienCell.Shared.Data.WeaponData.Types Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::AlienCell.Shared.Data.WeaponData.Types)reader.ReadInt32();
        }
    }

    public sealed class WeaponLadderData_TypesFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::AlienCell.Shared.Data.WeaponLadderData.Types>
    {
        public void Serialize(ref MessagePackWriter writer, global::AlienCell.Shared.Data.WeaponLadderData.Types value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::AlienCell.Shared.Data.WeaponLadderData.Types Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::AlienCell.Shared.Data.WeaponLadderData.Types)reader.ReadInt32();
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name



// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.AlienCell.Shared.Data
{
    using System;
    using System.Buffers;
    using MessagePack;

    public sealed class AchievementDataFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::AlienCell.Shared.Data.AchievementData>
    {


        private readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        private readonly byte[][] ____stringByteKeys;

        public AchievementDataFormatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
                { "Id", 0 },
                { "Name", 1 },
                { "Description", 2 },
            };

            this.____stringByteKeys = new byte[][]
            {
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Id"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Name"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Description"),
            };
        }

        public void Serialize(ref MessagePackWriter writer, global::AlienCell.Shared.Data.AchievementData value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteMapHeader(3);
            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.Write(value.Id);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Name, options);
            writer.WriteRaw(this.____stringByteKeys[2]);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Description, options);
        }

        public global::AlienCell.Shared.Data.AchievementData Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __Id__ = default(int);
            var __Name__ = default(string);
            var __Description__ = default(string);

            for (int i = 0; i < length; i++)
            {
                ReadOnlySpan<byte> stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                int key;
                if (!this.____keyMapping.TryGetValue(stringKey, out key))
                {
                    reader.Skip();
                    continue;
                }

                switch (key)
                {
                    case 0:
                        __Id__ = reader.ReadInt32();
                        break;
                    case 1:
                        __Name__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __Description__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::AlienCell.Shared.Data.AchievementData(__Id__, __Name__, __Description__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class AffinityDataFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::AlienCell.Shared.Data.AffinityData>
    {


        private readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        private readonly byte[][] ____stringByteKeys;

        public AffinityDataFormatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
                { "Id", 0 },
                { "Name", 1 },
                { "Description", 2 },
            };

            this.____stringByteKeys = new byte[][]
            {
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Id"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Name"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Description"),
            };
        }

        public void Serialize(ref MessagePackWriter writer, global::AlienCell.Shared.Data.AffinityData value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteMapHeader(3);
            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.Write(value.Id);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Name, options);
            writer.WriteRaw(this.____stringByteKeys[2]);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Description, options);
        }

        public global::AlienCell.Shared.Data.AffinityData Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __Id__ = default(int);
            var __Name__ = default(string);
            var __Description__ = default(string);

            for (int i = 0; i < length; i++)
            {
                ReadOnlySpan<byte> stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                int key;
                if (!this.____keyMapping.TryGetValue(stringKey, out key))
                {
                    reader.Skip();
                    continue;
                }

                switch (key)
                {
                    case 0:
                        __Id__ = reader.ReadInt32();
                        break;
                    case 1:
                        __Name__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __Description__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::AlienCell.Shared.Data.AffinityData(__Id__, __Name__, __Description__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ArtifactDataFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::AlienCell.Shared.Data.ArtifactData>
    {


        private readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        private readonly byte[][] ____stringByteKeys;

        public ArtifactDataFormatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
                { "Id", 0 },
                { "Name", 1 },
                { "Description", 2 },
                { "Ladder", 3 },
            };

            this.____stringByteKeys = new byte[][]
            {
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Id"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Name"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Description"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Ladder"),
            };
        }

        public void Serialize(ref MessagePackWriter writer, global::AlienCell.Shared.Data.ArtifactData value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteMapHeader(4);
            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.Write(value.Id);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Name, options);
            writer.WriteRaw(this.____stringByteKeys[2]);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Description, options);
            writer.WriteRaw(this.____stringByteKeys[3]);
            formatterResolver.GetFormatterWithVerify<global::AlienCell.Shared.Data.ArtifactLadderData.Types>().Serialize(ref writer, value.Ladder, options);
        }

        public global::AlienCell.Shared.Data.ArtifactData Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __Id__ = default(int);
            var __Name__ = default(string);
            var __Description__ = default(string);
            var __Ladder__ = default(global::AlienCell.Shared.Data.ArtifactLadderData.Types);

            for (int i = 0; i < length; i++)
            {
                ReadOnlySpan<byte> stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                int key;
                if (!this.____keyMapping.TryGetValue(stringKey, out key))
                {
                    reader.Skip();
                    continue;
                }

                switch (key)
                {
                    case 0:
                        __Id__ = reader.ReadInt32();
                        break;
                    case 1:
                        __Name__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __Description__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __Ladder__ = formatterResolver.GetFormatterWithVerify<global::AlienCell.Shared.Data.ArtifactLadderData.Types>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::AlienCell.Shared.Data.ArtifactData(__Id__, __Name__, __Description__, __Ladder__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ArtifactLadderDataFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::AlienCell.Shared.Data.ArtifactLadderData>
    {


        private readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        private readonly byte[][] ____stringByteKeys;

        public ArtifactLadderDataFormatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
                { "Id", 0 },
                { "Levels", 1 },
            };

            this.____stringByteKeys = new byte[][]
            {
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Id"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Levels"),
            };
        }

        public void Serialize(ref MessagePackWriter writer, global::AlienCell.Shared.Data.ArtifactLadderData value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteMapHeader(2);
            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.Write(value.Id);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::AlienCell.Shared.Structs.ArtifactLevelLadderData>>().Serialize(ref writer, value.Levels, options);
        }

        public global::AlienCell.Shared.Data.ArtifactLadderData Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __Id__ = default(int);
            var __Levels__ = default(global::System.Collections.Generic.List<global::AlienCell.Shared.Structs.ArtifactLevelLadderData>);

            for (int i = 0; i < length; i++)
            {
                ReadOnlySpan<byte> stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                int key;
                if (!this.____keyMapping.TryGetValue(stringKey, out key))
                {
                    reader.Skip();
                    continue;
                }

                switch (key)
                {
                    case 0:
                        __Id__ = reader.ReadInt32();
                        break;
                    case 1:
                        __Levels__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::AlienCell.Shared.Structs.ArtifactLevelLadderData>>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::AlienCell.Shared.Data.ArtifactLadderData(__Id__, __Levels__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ArtifactUpgradeMaterialDataFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::AlienCell.Shared.Data.ArtifactUpgradeMaterialData>
    {


        private readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        private readonly byte[][] ____stringByteKeys;

        public ArtifactUpgradeMaterialDataFormatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
                { "Id", 0 },
                { "Type", 1 },
                { "Name", 2 },
                { "Value", 3 },
                { "Description", 4 },
            };

            this.____stringByteKeys = new byte[][]
            {
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Id"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Type"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Name"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Value"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Description"),
            };
        }

        public void Serialize(ref MessagePackWriter writer, global::AlienCell.Shared.Data.ArtifactUpgradeMaterialData value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteMapHeader(5);
            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.Write(value.Id);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Type, options);
            writer.WriteRaw(this.____stringByteKeys[2]);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Name, options);
            writer.WriteRaw(this.____stringByteKeys[3]);
            writer.Write(value.Value);
            writer.WriteRaw(this.____stringByteKeys[4]);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Description, options);
        }

        public global::AlienCell.Shared.Data.ArtifactUpgradeMaterialData Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __Id__ = default(int);
            var __Type__ = default(string);
            var __Name__ = default(string);
            var __Value__ = default(ulong);
            var __Description__ = default(string);

            for (int i = 0; i < length; i++)
            {
                ReadOnlySpan<byte> stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                int key;
                if (!this.____keyMapping.TryGetValue(stringKey, out key))
                {
                    reader.Skip();
                    continue;
                }

                switch (key)
                {
                    case 0:
                        __Id__ = reader.ReadInt32();
                        break;
                    case 1:
                        __Type__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __Name__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __Value__ = reader.ReadUInt64();
                        break;
                    case 4:
                        __Description__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::AlienCell.Shared.Data.ArtifactUpgradeMaterialData(__Id__, __Type__, __Name__, __Value__, __Description__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class BuildingDataFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::AlienCell.Shared.Data.BuildingData>
    {


        private readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        private readonly byte[][] ____stringByteKeys;

        public BuildingDataFormatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
                { "Id", 0 },
                { "Name", 1 },
                { "Description", 2 },
            };

            this.____stringByteKeys = new byte[][]
            {
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Id"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Name"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Description"),
            };
        }

        public void Serialize(ref MessagePackWriter writer, global::AlienCell.Shared.Data.BuildingData value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteMapHeader(3);
            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.Write(value.Id);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Name, options);
            writer.WriteRaw(this.____stringByteKeys[2]);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Description, options);
        }

        public global::AlienCell.Shared.Data.BuildingData Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __Id__ = default(int);
            var __Name__ = default(string);
            var __Description__ = default(string);

            for (int i = 0; i < length; i++)
            {
                ReadOnlySpan<byte> stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                int key;
                if (!this.____keyMapping.TryGetValue(stringKey, out key))
                {
                    reader.Skip();
                    continue;
                }

                switch (key)
                {
                    case 0:
                        __Id__ = reader.ReadInt32();
                        break;
                    case 1:
                        __Name__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __Description__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::AlienCell.Shared.Data.BuildingData(__Id__, __Name__, __Description__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class CurrencyDataFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::AlienCell.Shared.Data.CurrencyData>
    {


        private readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        private readonly byte[][] ____stringByteKeys;

        public CurrencyDataFormatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
                { "Id", 0 },
                { "Name", 1 },
                { "Ticker", 2 },
            };

            this.____stringByteKeys = new byte[][]
            {
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Id"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Name"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Ticker"),
            };
        }

        public void Serialize(ref MessagePackWriter writer, global::AlienCell.Shared.Data.CurrencyData value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteMapHeader(3);
            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.Write(value.Id);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Name, options);
            writer.WriteRaw(this.____stringByteKeys[2]);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Ticker, options);
        }

        public global::AlienCell.Shared.Data.CurrencyData Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __Id__ = default(int);
            var __Name__ = default(string);
            var __Ticker__ = default(string);

            for (int i = 0; i < length; i++)
            {
                ReadOnlySpan<byte> stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                int key;
                if (!this.____keyMapping.TryGetValue(stringKey, out key))
                {
                    reader.Skip();
                    continue;
                }

                switch (key)
                {
                    case 0:
                        __Id__ = reader.ReadInt32();
                        break;
                    case 1:
                        __Name__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __Ticker__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::AlienCell.Shared.Data.CurrencyData(__Id__, __Name__, __Ticker__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ExpeditionDataFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::AlienCell.Shared.Data.ExpeditionData>
    {


        private readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        private readonly byte[][] ____stringByteKeys;

        public ExpeditionDataFormatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
                { "Id", 0 },
                { "Name", 1 },
                { "Description", 2 },
            };

            this.____stringByteKeys = new byte[][]
            {
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Id"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Name"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Description"),
            };
        }

        public void Serialize(ref MessagePackWriter writer, global::AlienCell.Shared.Data.ExpeditionData value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteMapHeader(3);
            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.Write(value.Id);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Name, options);
            writer.WriteRaw(this.____stringByteKeys[2]);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Description, options);
        }

        public global::AlienCell.Shared.Data.ExpeditionData Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __Id__ = default(int);
            var __Name__ = default(string);
            var __Description__ = default(string);

            for (int i = 0; i < length; i++)
            {
                ReadOnlySpan<byte> stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                int key;
                if (!this.____keyMapping.TryGetValue(stringKey, out key))
                {
                    reader.Skip();
                    continue;
                }

                switch (key)
                {
                    case 0:
                        __Id__ = reader.ReadInt32();
                        break;
                    case 1:
                        __Name__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __Description__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::AlienCell.Shared.Data.ExpeditionData(__Id__, __Name__, __Description__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class FactionDataFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::AlienCell.Shared.Data.FactionData>
    {


        private readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        private readonly byte[][] ____stringByteKeys;

        public FactionDataFormatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
                { "Id", 0 },
                { "Name", 1 },
                { "Description", 2 },
            };

            this.____stringByteKeys = new byte[][]
            {
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Id"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Name"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Description"),
            };
        }

        public void Serialize(ref MessagePackWriter writer, global::AlienCell.Shared.Data.FactionData value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteMapHeader(3);
            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.Write(value.Id);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Name, options);
            writer.WriteRaw(this.____stringByteKeys[2]);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Description, options);
        }

        public global::AlienCell.Shared.Data.FactionData Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __Id__ = default(int);
            var __Name__ = default(string);
            var __Description__ = default(string);

            for (int i = 0; i < length; i++)
            {
                ReadOnlySpan<byte> stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                int key;
                if (!this.____keyMapping.TryGetValue(stringKey, out key))
                {
                    reader.Skip();
                    continue;
                }

                switch (key)
                {
                    case 0:
                        __Id__ = reader.ReadInt32();
                        break;
                    case 1:
                        __Name__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __Description__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::AlienCell.Shared.Data.FactionData(__Id__, __Name__, __Description__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class HeroClassDataFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::AlienCell.Shared.Data.HeroClassData>
    {


        private readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        private readonly byte[][] ____stringByteKeys;

        public HeroClassDataFormatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
                { "Id", 0 },
                { "Name", 1 },
                { "Description", 2 },
            };

            this.____stringByteKeys = new byte[][]
            {
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Id"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Name"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Description"),
            };
        }

        public void Serialize(ref MessagePackWriter writer, global::AlienCell.Shared.Data.HeroClassData value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteMapHeader(3);
            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.Write(value.Id);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Name, options);
            writer.WriteRaw(this.____stringByteKeys[2]);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Description, options);
        }

        public global::AlienCell.Shared.Data.HeroClassData Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __Id__ = default(int);
            var __Name__ = default(string);
            var __Description__ = default(string);

            for (int i = 0; i < length; i++)
            {
                ReadOnlySpan<byte> stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                int key;
                if (!this.____keyMapping.TryGetValue(stringKey, out key))
                {
                    reader.Skip();
                    continue;
                }

                switch (key)
                {
                    case 0:
                        __Id__ = reader.ReadInt32();
                        break;
                    case 1:
                        __Name__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __Description__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::AlienCell.Shared.Data.HeroClassData(__Id__, __Name__, __Description__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class HeroDataFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::AlienCell.Shared.Data.HeroData>
    {


        private readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        private readonly byte[][] ____stringByteKeys;

        public HeroDataFormatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
                { "Id", 0 },
                { "Name", 1 },
                { "Description", 2 },
                { "Ladder", 3 },
                { "Affinity", 4 },
                { "Klass", 5 },
                { "Slots", 6 },
                { "Skills", 7 },
                { "Quality", 8 },
            };

            this.____stringByteKeys = new byte[][]
            {
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Id"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Name"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Description"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Ladder"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Affinity"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Klass"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Slots"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Skills"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Quality"),
            };
        }

        public void Serialize(ref MessagePackWriter writer, global::AlienCell.Shared.Data.HeroData value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteMapHeader(9);
            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.Write(value.Id);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Name, options);
            writer.WriteRaw(this.____stringByteKeys[2]);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Description, options);
            writer.WriteRaw(this.____stringByteKeys[3]);
            formatterResolver.GetFormatterWithVerify<global::AlienCell.Shared.Data.HeroLadderData.Types>().Serialize(ref writer, value.Ladder, options);
            writer.WriteRaw(this.____stringByteKeys[4]);
            formatterResolver.GetFormatterWithVerify<global::AlienCell.Shared.Data.AffinityData.Types>().Serialize(ref writer, value.Affinity, options);
            writer.WriteRaw(this.____stringByteKeys[5]);
            formatterResolver.GetFormatterWithVerify<global::AlienCell.Shared.Data.HeroClassData.Types>().Serialize(ref writer, value.Klass, options);
            writer.WriteRaw(this.____stringByteKeys[6]);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::AlienCell.Shared.Data.HeroWeaponSlotData.Types>>().Serialize(ref writer, value.Slots, options);
            writer.WriteRaw(this.____stringByteKeys[7]);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::AlienCell.Shared.Data.SkillData.Types>>().Serialize(ref writer, value.Skills, options);
            writer.WriteRaw(this.____stringByteKeys[8]);
            formatterResolver.GetFormatterWithVerify<global::AlienCell.Shared.Data.QualityData.Types>().Serialize(ref writer, value.Quality, options);
        }

        public global::AlienCell.Shared.Data.HeroData Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __Id__ = default(int);
            var __Name__ = default(string);
            var __Description__ = default(string);
            var __Ladder__ = default(global::AlienCell.Shared.Data.HeroLadderData.Types);
            var __Affinity__ = default(global::AlienCell.Shared.Data.AffinityData.Types);
            var __Klass__ = default(global::AlienCell.Shared.Data.HeroClassData.Types);
            var __Slots__ = default(global::System.Collections.Generic.List<global::AlienCell.Shared.Data.HeroWeaponSlotData.Types>);
            var __Skills__ = default(global::System.Collections.Generic.List<global::AlienCell.Shared.Data.SkillData.Types>);
            var __Quality__ = default(global::AlienCell.Shared.Data.QualityData.Types);

            for (int i = 0; i < length; i++)
            {
                ReadOnlySpan<byte> stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                int key;
                if (!this.____keyMapping.TryGetValue(stringKey, out key))
                {
                    reader.Skip();
                    continue;
                }

                switch (key)
                {
                    case 0:
                        __Id__ = reader.ReadInt32();
                        break;
                    case 1:
                        __Name__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __Description__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __Ladder__ = formatterResolver.GetFormatterWithVerify<global::AlienCell.Shared.Data.HeroLadderData.Types>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __Affinity__ = formatterResolver.GetFormatterWithVerify<global::AlienCell.Shared.Data.AffinityData.Types>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        __Klass__ = formatterResolver.GetFormatterWithVerify<global::AlienCell.Shared.Data.HeroClassData.Types>().Deserialize(ref reader, options);
                        break;
                    case 6:
                        __Slots__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::AlienCell.Shared.Data.HeroWeaponSlotData.Types>>().Deserialize(ref reader, options);
                        break;
                    case 7:
                        __Skills__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::AlienCell.Shared.Data.SkillData.Types>>().Deserialize(ref reader, options);
                        break;
                    case 8:
                        __Quality__ = formatterResolver.GetFormatterWithVerify<global::AlienCell.Shared.Data.QualityData.Types>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::AlienCell.Shared.Data.HeroData(__Id__, __Name__, __Description__, __Ladder__, __Affinity__, __Klass__, __Slots__, __Skills__, __Quality__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class HeroLadderDataFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::AlienCell.Shared.Data.HeroLadderData>
    {


        private readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        private readonly byte[][] ____stringByteKeys;

        public HeroLadderDataFormatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
                { "Id", 0 },
                { "Levels", 1 },
            };

            this.____stringByteKeys = new byte[][]
            {
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Id"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Levels"),
            };
        }

        public void Serialize(ref MessagePackWriter writer, global::AlienCell.Shared.Data.HeroLadderData value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteMapHeader(2);
            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.Write(value.Id);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::AlienCell.Shared.Structs.HeroLevelLadderData>>().Serialize(ref writer, value.Levels, options);
        }

        public global::AlienCell.Shared.Data.HeroLadderData Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __Id__ = default(int);
            var __Levels__ = default(global::System.Collections.Generic.List<global::AlienCell.Shared.Structs.HeroLevelLadderData>);

            for (int i = 0; i < length; i++)
            {
                ReadOnlySpan<byte> stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                int key;
                if (!this.____keyMapping.TryGetValue(stringKey, out key))
                {
                    reader.Skip();
                    continue;
                }

                switch (key)
                {
                    case 0:
                        __Id__ = reader.ReadInt32();
                        break;
                    case 1:
                        __Levels__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::AlienCell.Shared.Structs.HeroLevelLadderData>>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::AlienCell.Shared.Data.HeroLadderData(__Id__, __Levels__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class HeroSkinDataFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::AlienCell.Shared.Data.HeroSkinData>
    {


        private readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        private readonly byte[][] ____stringByteKeys;

        public HeroSkinDataFormatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
                { "Id", 0 },
                { "Name", 1 },
                { "Description", 2 },
            };

            this.____stringByteKeys = new byte[][]
            {
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Id"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Name"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Description"),
            };
        }

        public void Serialize(ref MessagePackWriter writer, global::AlienCell.Shared.Data.HeroSkinData value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteMapHeader(3);
            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.Write(value.Id);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Name, options);
            writer.WriteRaw(this.____stringByteKeys[2]);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Description, options);
        }

        public global::AlienCell.Shared.Data.HeroSkinData Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __Id__ = default(int);
            var __Name__ = default(string);
            var __Description__ = default(string);

            for (int i = 0; i < length; i++)
            {
                ReadOnlySpan<byte> stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                int key;
                if (!this.____keyMapping.TryGetValue(stringKey, out key))
                {
                    reader.Skip();
                    continue;
                }

                switch (key)
                {
                    case 0:
                        __Id__ = reader.ReadInt32();
                        break;
                    case 1:
                        __Name__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __Description__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::AlienCell.Shared.Data.HeroSkinData(__Id__, __Name__, __Description__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class HeroUpgradeMaterialDataFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::AlienCell.Shared.Data.HeroUpgradeMaterialData>
    {


        private readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        private readonly byte[][] ____stringByteKeys;

        public HeroUpgradeMaterialDataFormatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
                { "Id", 0 },
                { "Type", 1 },
                { "Name", 2 },
                { "Value", 3 },
                { "Description", 4 },
            };

            this.____stringByteKeys = new byte[][]
            {
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Id"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Type"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Name"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Value"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Description"),
            };
        }

        public void Serialize(ref MessagePackWriter writer, global::AlienCell.Shared.Data.HeroUpgradeMaterialData value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteMapHeader(5);
            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.Write(value.Id);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Type, options);
            writer.WriteRaw(this.____stringByteKeys[2]);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Name, options);
            writer.WriteRaw(this.____stringByteKeys[3]);
            writer.Write(value.Value);
            writer.WriteRaw(this.____stringByteKeys[4]);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Description, options);
        }

        public global::AlienCell.Shared.Data.HeroUpgradeMaterialData Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __Id__ = default(int);
            var __Type__ = default(string);
            var __Name__ = default(string);
            var __Value__ = default(ulong);
            var __Description__ = default(string);

            for (int i = 0; i < length; i++)
            {
                ReadOnlySpan<byte> stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                int key;
                if (!this.____keyMapping.TryGetValue(stringKey, out key))
                {
                    reader.Skip();
                    continue;
                }

                switch (key)
                {
                    case 0:
                        __Id__ = reader.ReadInt32();
                        break;
                    case 1:
                        __Type__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __Name__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __Value__ = reader.ReadUInt64();
                        break;
                    case 4:
                        __Description__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::AlienCell.Shared.Data.HeroUpgradeMaterialData(__Id__, __Type__, __Name__, __Value__, __Description__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class HeroWeaponSlotDataFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::AlienCell.Shared.Data.HeroWeaponSlotData>
    {


        private readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        private readonly byte[][] ____stringByteKeys;

        public HeroWeaponSlotDataFormatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
                { "Id", 0 },
                { "Name", 1 },
            };

            this.____stringByteKeys = new byte[][]
            {
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Id"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Name"),
            };
        }

        public void Serialize(ref MessagePackWriter writer, global::AlienCell.Shared.Data.HeroWeaponSlotData value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteMapHeader(2);
            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.Write(value.Id);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Name, options);
        }

        public global::AlienCell.Shared.Data.HeroWeaponSlotData Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __Id__ = default(int);
            var __Name__ = default(string);

            for (int i = 0; i < length; i++)
            {
                ReadOnlySpan<byte> stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                int key;
                if (!this.____keyMapping.TryGetValue(stringKey, out key))
                {
                    reader.Skip();
                    continue;
                }

                switch (key)
                {
                    case 0:
                        __Id__ = reader.ReadInt32();
                        break;
                    case 1:
                        __Name__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::AlienCell.Shared.Data.HeroWeaponSlotData(__Id__, __Name__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class QualityDataFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::AlienCell.Shared.Data.QualityData>
    {


        private readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        private readonly byte[][] ____stringByteKeys;

        public QualityDataFormatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
                { "Id", 0 },
                { "Name", 1 },
            };

            this.____stringByteKeys = new byte[][]
            {
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Id"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Name"),
            };
        }

        public void Serialize(ref MessagePackWriter writer, global::AlienCell.Shared.Data.QualityData value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteMapHeader(2);
            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.Write(value.Id);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Name, options);
        }

        public global::AlienCell.Shared.Data.QualityData Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __Id__ = default(int);
            var __Name__ = default(string);

            for (int i = 0; i < length; i++)
            {
                ReadOnlySpan<byte> stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                int key;
                if (!this.____keyMapping.TryGetValue(stringKey, out key))
                {
                    reader.Skip();
                    continue;
                }

                switch (key)
                {
                    case 0:
                        __Id__ = reader.ReadInt32();
                        break;
                    case 1:
                        __Name__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::AlienCell.Shared.Data.QualityData(__Id__, __Name__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class SkillDataFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::AlienCell.Shared.Data.SkillData>
    {


        private readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        private readonly byte[][] ____stringByteKeys;

        public SkillDataFormatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
                { "Id", 0 },
                { "Name", 1 },
            };

            this.____stringByteKeys = new byte[][]
            {
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Id"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Name"),
            };
        }

        public void Serialize(ref MessagePackWriter writer, global::AlienCell.Shared.Data.SkillData value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteMapHeader(2);
            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.Write(value.Id);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Name, options);
        }

        public global::AlienCell.Shared.Data.SkillData Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __Id__ = default(int);
            var __Name__ = default(string);

            for (int i = 0; i < length; i++)
            {
                ReadOnlySpan<byte> stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                int key;
                if (!this.____keyMapping.TryGetValue(stringKey, out key))
                {
                    reader.Skip();
                    continue;
                }

                switch (key)
                {
                    case 0:
                        __Id__ = reader.ReadInt32();
                        break;
                    case 1:
                        __Name__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::AlienCell.Shared.Data.SkillData(__Id__, __Name__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class WeaponDataFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::AlienCell.Shared.Data.WeaponData>
    {


        private readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        private readonly byte[][] ____stringByteKeys;

        public WeaponDataFormatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
                { "Id", 0 },
                { "Name", 1 },
                { "Description", 2 },
                { "Ladder", 3 },
            };

            this.____stringByteKeys = new byte[][]
            {
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Id"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Name"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Description"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Ladder"),
            };
        }

        public void Serialize(ref MessagePackWriter writer, global::AlienCell.Shared.Data.WeaponData value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteMapHeader(4);
            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.Write(value.Id);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Name, options);
            writer.WriteRaw(this.____stringByteKeys[2]);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Description, options);
            writer.WriteRaw(this.____stringByteKeys[3]);
            formatterResolver.GetFormatterWithVerify<global::AlienCell.Shared.Data.WeaponLadderData.Types>().Serialize(ref writer, value.Ladder, options);
        }

        public global::AlienCell.Shared.Data.WeaponData Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __Id__ = default(int);
            var __Name__ = default(string);
            var __Description__ = default(string);
            var __Ladder__ = default(global::AlienCell.Shared.Data.WeaponLadderData.Types);

            for (int i = 0; i < length; i++)
            {
                ReadOnlySpan<byte> stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                int key;
                if (!this.____keyMapping.TryGetValue(stringKey, out key))
                {
                    reader.Skip();
                    continue;
                }

                switch (key)
                {
                    case 0:
                        __Id__ = reader.ReadInt32();
                        break;
                    case 1:
                        __Name__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __Description__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __Ladder__ = formatterResolver.GetFormatterWithVerify<global::AlienCell.Shared.Data.WeaponLadderData.Types>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::AlienCell.Shared.Data.WeaponData(__Id__, __Name__, __Description__, __Ladder__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class WeaponLadderDataFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::AlienCell.Shared.Data.WeaponLadderData>
    {


        private readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        private readonly byte[][] ____stringByteKeys;

        public WeaponLadderDataFormatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
                { "Id", 0 },
                { "Levels", 1 },
            };

            this.____stringByteKeys = new byte[][]
            {
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Id"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Levels"),
            };
        }

        public void Serialize(ref MessagePackWriter writer, global::AlienCell.Shared.Data.WeaponLadderData value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteMapHeader(2);
            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.Write(value.Id);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::AlienCell.Shared.Structs.WeaponLevelLadderData>>().Serialize(ref writer, value.Levels, options);
        }

        public global::AlienCell.Shared.Data.WeaponLadderData Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __Id__ = default(int);
            var __Levels__ = default(global::System.Collections.Generic.List<global::AlienCell.Shared.Structs.WeaponLevelLadderData>);

            for (int i = 0; i < length; i++)
            {
                ReadOnlySpan<byte> stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                int key;
                if (!this.____keyMapping.TryGetValue(stringKey, out key))
                {
                    reader.Skip();
                    continue;
                }

                switch (key)
                {
                    case 0:
                        __Id__ = reader.ReadInt32();
                        break;
                    case 1:
                        __Levels__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::AlienCell.Shared.Structs.WeaponLevelLadderData>>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::AlienCell.Shared.Data.WeaponLadderData(__Id__, __Levels__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class WeaponUpgradeMaterialDataFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::AlienCell.Shared.Data.WeaponUpgradeMaterialData>
    {


        private readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        private readonly byte[][] ____stringByteKeys;

        public WeaponUpgradeMaterialDataFormatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
                { "Id", 0 },
                { "Type", 1 },
                { "Name", 2 },
                { "Value", 3 },
                { "Description", 4 },
            };

            this.____stringByteKeys = new byte[][]
            {
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Id"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Type"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Name"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Value"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Description"),
            };
        }

        public void Serialize(ref MessagePackWriter writer, global::AlienCell.Shared.Data.WeaponUpgradeMaterialData value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteMapHeader(5);
            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.Write(value.Id);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Type, options);
            writer.WriteRaw(this.____stringByteKeys[2]);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Name, options);
            writer.WriteRaw(this.____stringByteKeys[3]);
            writer.Write(value.Value);
            writer.WriteRaw(this.____stringByteKeys[4]);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Description, options);
        }

        public global::AlienCell.Shared.Data.WeaponUpgradeMaterialData Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __Id__ = default(int);
            var __Type__ = default(string);
            var __Name__ = default(string);
            var __Value__ = default(ulong);
            var __Description__ = default(string);

            for (int i = 0; i < length; i++)
            {
                ReadOnlySpan<byte> stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                int key;
                if (!this.____keyMapping.TryGetValue(stringKey, out key))
                {
                    reader.Skip();
                    continue;
                }

                switch (key)
                {
                    case 0:
                        __Id__ = reader.ReadInt32();
                        break;
                    case 1:
                        __Type__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __Name__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __Value__ = reader.ReadUInt64();
                        break;
                    case 4:
                        __Description__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::AlienCell.Shared.Data.WeaponUpgradeMaterialData(__Id__, __Type__, __Name__, __Value__, __Description__);
            reader.Depth--;
            return ____result;
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.AlienCell.Shared.Protocol
{
    using System;
    using System.Buffers;
    using MessagePack;

    public sealed class ChatMessageResponseFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::AlienCell.Shared.Protocol.ChatMessageResponse>
    {


        public void Serialize(ref MessagePackWriter writer, global::AlienCell.Shared.Protocol.ChatMessageResponse value, global::MessagePack.MessagePackSerializerOptions options)
        {
            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.UserName, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Message, options);
        }

        public global::AlienCell.Shared.Protocol.ChatMessageResponse Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __UserName__ = default(string);
            var __Message__ = default(string);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __UserName__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __Message__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::AlienCell.Shared.Protocol.ChatMessageResponse();
            ____result.UserName = __UserName__;
            ____result.Message = __Message__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class GetChallengeRequestFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::AlienCell.Shared.Protocol.GetChallengeRequest>
    {


        private readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        private readonly byte[][] ____stringByteKeys;

        public GetChallengeRequestFormatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
                { "UserId", 0 },
            };

            this.____stringByteKeys = new byte[][]
            {
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("UserId"),
            };
        }

        public void Serialize(ref MessagePackWriter writer, global::AlienCell.Shared.Protocol.GetChallengeRequest value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteMapHeader(1);
            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::System.Ulid>().Serialize(ref writer, value.UserId, options);
        }

        public global::AlienCell.Shared.Protocol.GetChallengeRequest Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __UserId__ = default(global::System.Ulid);

            for (int i = 0; i < length; i++)
            {
                ReadOnlySpan<byte> stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                int key;
                if (!this.____keyMapping.TryGetValue(stringKey, out key))
                {
                    reader.Skip();
                    continue;
                }

                switch (key)
                {
                    case 0:
                        __UserId__ = formatterResolver.GetFormatterWithVerify<global::System.Ulid>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::AlienCell.Shared.Protocol.GetChallengeRequest();
            ____result.UserId = __UserId__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class GetChallengeResponseFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::AlienCell.Shared.Protocol.GetChallengeResponse>
    {


        private readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        private readonly byte[][] ____stringByteKeys;

        public GetChallengeResponseFormatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
                { "Challenge", 0 },
            };

            this.____stringByteKeys = new byte[][]
            {
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Challenge"),
            };
        }

        public void Serialize(ref MessagePackWriter writer, global::AlienCell.Shared.Protocol.GetChallengeResponse value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteMapHeader(1);
            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Challenge, options);
        }

        public global::AlienCell.Shared.Protocol.GetChallengeResponse Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __Challenge__ = default(string);

            for (int i = 0; i < length; i++)
            {
                ReadOnlySpan<byte> stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                int key;
                if (!this.____keyMapping.TryGetValue(stringKey, out key))
                {
                    reader.Skip();
                    continue;
                }

                switch (key)
                {
                    case 0:
                        __Challenge__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::AlienCell.Shared.Protocol.GetChallengeResponse();
            ____result.Challenge = __Challenge__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class JoinChatRoomRequestFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::AlienCell.Shared.Protocol.JoinChatRoomRequest>
    {


        public void Serialize(ref MessagePackWriter writer, global::AlienCell.Shared.Protocol.JoinChatRoomRequest value, global::MessagePack.MessagePackSerializerOptions options)
        {
            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.RoomName, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.UserName, options);
        }

        public global::AlienCell.Shared.Protocol.JoinChatRoomRequest Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __RoomName__ = default(string);
            var __UserName__ = default(string);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __RoomName__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __UserName__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::AlienCell.Shared.Protocol.JoinChatRoomRequest();
            ____result.RoomName = __RoomName__;
            ____result.UserName = __UserName__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class RegisterAccountRequestFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::AlienCell.Shared.Protocol.RegisterAccountRequest>
    {


        private readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        private readonly byte[][] ____stringByteKeys;

        public RegisterAccountRequestFormatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
                { "Address", 0 },
                { "DeviceUId", 1 },
            };

            this.____stringByteKeys = new byte[][]
            {
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Address"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("DeviceUId"),
            };
        }

        public void Serialize(ref MessagePackWriter writer, global::AlienCell.Shared.Protocol.RegisterAccountRequest value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteMapHeader(2);
            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<byte[]>().Serialize(ref writer, value.Address, options);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.DeviceUId, options);
        }

        public global::AlienCell.Shared.Protocol.RegisterAccountRequest Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __Address__ = default(byte[]);
            var __DeviceUId__ = default(string);

            for (int i = 0; i < length; i++)
            {
                ReadOnlySpan<byte> stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                int key;
                if (!this.____keyMapping.TryGetValue(stringKey, out key))
                {
                    reader.Skip();
                    continue;
                }

                switch (key)
                {
                    case 0:
                        __Address__ = formatterResolver.GetFormatterWithVerify<byte[]>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __DeviceUId__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::AlienCell.Shared.Protocol.RegisterAccountRequest();
            ____result.Address = __Address__;
            ____result.DeviceUId = __DeviceUId__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class RegisterAccountResponseFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::AlienCell.Shared.Protocol.RegisterAccountResponse>
    {


        private readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        private readonly byte[][] ____stringByteKeys;

        public RegisterAccountResponseFormatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
                { "Account", 0 },
                { "Success", 1 },
                { "UserId", 2 },
            };

            this.____stringByteKeys = new byte[][]
            {
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Account"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Success"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("UserId"),
            };
        }

        public void Serialize(ref MessagePackWriter writer, global::AlienCell.Shared.Protocol.RegisterAccountResponse value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteMapHeader(3);
            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::AlienCell.Shared.Protocol.Models.AccountDTO>().Serialize(ref writer, value.Account, options);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.Write(value.Success);
            writer.WriteRaw(this.____stringByteKeys[2]);
            formatterResolver.GetFormatterWithVerify<global::System.Ulid>().Serialize(ref writer, value.UserId, options);
        }

        public global::AlienCell.Shared.Protocol.RegisterAccountResponse Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __Account__ = default(global::AlienCell.Shared.Protocol.Models.AccountDTO);
            var __Success__ = default(bool);
            var __UserId__ = default(global::System.Ulid);

            for (int i = 0; i < length; i++)
            {
                ReadOnlySpan<byte> stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                int key;
                if (!this.____keyMapping.TryGetValue(stringKey, out key))
                {
                    reader.Skip();
                    continue;
                }

                switch (key)
                {
                    case 0:
                        __Account__ = formatterResolver.GetFormatterWithVerify<global::AlienCell.Shared.Protocol.Models.AccountDTO>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __Success__ = reader.ReadBoolean();
                        break;
                    case 2:
                        __UserId__ = formatterResolver.GetFormatterWithVerify<global::System.Ulid>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::AlienCell.Shared.Protocol.RegisterAccountResponse();
            ____result.Account = __Account__;
            ____result.Success = __Success__;
            ____result.UserId = __UserId__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class UpdateAccountRequestFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::AlienCell.Shared.Protocol.UpdateAccountRequest>
    {


        private readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        private readonly byte[][] ____stringByteKeys;

        public UpdateAccountRequestFormatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
                { "Id", 0 },
                { "Name", 1 },
                { "Email", 2 },
                { "PasswordHash", 3 },
                { "Phone", 4 },
                { "Address", 5 },
                { "EKS", 6 },
            };

            this.____stringByteKeys = new byte[][]
            {
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Id"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Name"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Email"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("PasswordHash"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Phone"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Address"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("EKS"),
            };
        }

        public void Serialize(ref MessagePackWriter writer, global::AlienCell.Shared.Protocol.UpdateAccountRequest value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteMapHeader(7);
            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::System.Ulid>().Serialize(ref writer, value.Id, options);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Name, options);
            writer.WriteRaw(this.____stringByteKeys[2]);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Email, options);
            writer.WriteRaw(this.____stringByteKeys[3]);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.PasswordHash, options);
            writer.WriteRaw(this.____stringByteKeys[4]);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Phone, options);
            writer.WriteRaw(this.____stringByteKeys[5]);
            formatterResolver.GetFormatterWithVerify<byte[]>().Serialize(ref writer, value.Address, options);
            writer.WriteRaw(this.____stringByteKeys[6]);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.EKS, options);
        }

        public global::AlienCell.Shared.Protocol.UpdateAccountRequest Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __Id__ = default(global::System.Ulid);
            var __Name__ = default(string);
            var __Email__ = default(string);
            var __PasswordHash__ = default(string);
            var __Phone__ = default(string);
            var __Address__ = default(byte[]);
            var __EKS__ = default(string);

            for (int i = 0; i < length; i++)
            {
                ReadOnlySpan<byte> stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                int key;
                if (!this.____keyMapping.TryGetValue(stringKey, out key))
                {
                    reader.Skip();
                    continue;
                }

                switch (key)
                {
                    case 0:
                        __Id__ = formatterResolver.GetFormatterWithVerify<global::System.Ulid>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __Name__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __Email__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __PasswordHash__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __Phone__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        __Address__ = formatterResolver.GetFormatterWithVerify<byte[]>().Deserialize(ref reader, options);
                        break;
                    case 6:
                        __EKS__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::AlienCell.Shared.Protocol.UpdateAccountRequest();
            ____result.Id = __Id__;
            ____result.Name = __Name__;
            ____result.Email = __Email__;
            ____result.PasswordHash = __PasswordHash__;
            ____result.Phone = __Phone__;
            ____result.Address = __Address__;
            ____result.EKS = __EKS__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class UpdateAccountResponseFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::AlienCell.Shared.Protocol.UpdateAccountResponse>
    {


        public void Serialize(ref MessagePackWriter writer, global::AlienCell.Shared.Protocol.UpdateAccountResponse value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            formatterResolver.GetFormatterWithVerify<global::AlienCell.Shared.Protocol.Models.AccountDTO>().Serialize(ref writer, value.Account, options);
            writer.Write(value.Success);
        }

        public global::AlienCell.Shared.Protocol.UpdateAccountResponse Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Account__ = default(global::AlienCell.Shared.Protocol.Models.AccountDTO);
            var __Success__ = default(bool);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __Account__ = formatterResolver.GetFormatterWithVerify<global::AlienCell.Shared.Protocol.Models.AccountDTO>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __Success__ = reader.ReadBoolean();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::AlienCell.Shared.Protocol.UpdateAccountResponse();
            ____result.Account = __Account__;
            ____result.Success = __Success__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ValidateChallengeRequestFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::AlienCell.Shared.Protocol.ValidateChallengeRequest>
    {


        private readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        private readonly byte[][] ____stringByteKeys;

        public ValidateChallengeRequestFormatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
                { "UserId", 0 },
                { "Signature", 1 },
            };

            this.____stringByteKeys = new byte[][]
            {
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("UserId"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Signature"),
            };
        }

        public void Serialize(ref MessagePackWriter writer, global::AlienCell.Shared.Protocol.ValidateChallengeRequest value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteMapHeader(2);
            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::System.Ulid>().Serialize(ref writer, value.UserId, options);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Signature, options);
        }

        public global::AlienCell.Shared.Protocol.ValidateChallengeRequest Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __UserId__ = default(global::System.Ulid);
            var __Signature__ = default(string);

            for (int i = 0; i < length; i++)
            {
                ReadOnlySpan<byte> stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                int key;
                if (!this.____keyMapping.TryGetValue(stringKey, out key))
                {
                    reader.Skip();
                    continue;
                }

                switch (key)
                {
                    case 0:
                        __UserId__ = formatterResolver.GetFormatterWithVerify<global::System.Ulid>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __Signature__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::AlienCell.Shared.Protocol.ValidateChallengeRequest();
            ____result.UserId = __UserId__;
            ____result.Signature = __Signature__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ValidateChallengeResponseFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::AlienCell.Shared.Protocol.ValidateChallengeResponse>
    {


        public void Serialize(ref MessagePackWriter writer, global::AlienCell.Shared.Protocol.ValidateChallengeResponse value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(3);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Token, options);
            formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset>().Serialize(ref writer, value.Expiration, options);
            writer.Write(value.Success);
        }

        public global::AlienCell.Shared.Protocol.ValidateChallengeResponse Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Token__ = default(string);
            var __Expiration__ = default(global::System.DateTimeOffset);
            var __Success__ = default(bool);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __Token__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __Expiration__ = formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __Success__ = reader.ReadBoolean();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::AlienCell.Shared.Protocol.ValidateChallengeResponse(__Token__, __Expiration__);
            ____result.Token = __Token__;
            ____result.Expiration = __Expiration__;
            ____result.Success = __Success__;
            reader.Depth--;
            return ____result;
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.AlienCell.Shared.Protocol.Models
{
    using System;
    using System.Buffers;
    using MessagePack;

    public sealed class AccountDTOFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::AlienCell.Shared.Protocol.Models.AccountDTO>
    {


        private readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        private readonly byte[][] ____stringByteKeys;

        public AccountDTOFormatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
                { "Id", 0 },
                { "DeviceUId", 1 },
                { "Name", 2 },
                { "Email", 3 },
                { "PasswordHash", 4 },
                { "Phone", 5 },
                { "Address", 6 },
                { "EKSHash", 7 },
                { "CreatedAt", 8 },
                { "UpdatedAt", 9 },
            };

            this.____stringByteKeys = new byte[][]
            {
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Id"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("DeviceUId"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Name"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Email"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("PasswordHash"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Phone"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Address"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("EKSHash"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("CreatedAt"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("UpdatedAt"),
            };
        }

        public void Serialize(ref MessagePackWriter writer, global::AlienCell.Shared.Protocol.Models.AccountDTO value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteMapHeader(10);
            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::System.Ulid>().Serialize(ref writer, value.Id, options);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.DeviceUId, options);
            writer.WriteRaw(this.____stringByteKeys[2]);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Name, options);
            writer.WriteRaw(this.____stringByteKeys[3]);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Email, options);
            writer.WriteRaw(this.____stringByteKeys[4]);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.PasswordHash, options);
            writer.WriteRaw(this.____stringByteKeys[5]);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Phone, options);
            writer.WriteRaw(this.____stringByteKeys[6]);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Address, options);
            writer.WriteRaw(this.____stringByteKeys[7]);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.EKSHash, options);
            writer.WriteRaw(this.____stringByteKeys[8]);
            formatterResolver.GetFormatterWithVerify<global::System.DateTime>().Serialize(ref writer, value.CreatedAt, options);
            writer.WriteRaw(this.____stringByteKeys[9]);
            formatterResolver.GetFormatterWithVerify<global::System.DateTime>().Serialize(ref writer, value.UpdatedAt, options);
        }

        public global::AlienCell.Shared.Protocol.Models.AccountDTO Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __Id__ = default(global::System.Ulid);
            var __DeviceUId__ = default(string);
            var __Name__ = default(string);
            var __Email__ = default(string);
            var __PasswordHash__ = default(string);
            var __Phone__ = default(string);
            var __Address__ = default(string);
            var __EKSHash__ = default(string);
            var __CreatedAt__ = default(global::System.DateTime);
            var __UpdatedAt__ = default(global::System.DateTime);

            for (int i = 0; i < length; i++)
            {
                ReadOnlySpan<byte> stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                int key;
                if (!this.____keyMapping.TryGetValue(stringKey, out key))
                {
                    reader.Skip();
                    continue;
                }

                switch (key)
                {
                    case 0:
                        __Id__ = formatterResolver.GetFormatterWithVerify<global::System.Ulid>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __DeviceUId__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __Name__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __Email__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __PasswordHash__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        __Phone__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 6:
                        __Address__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 7:
                        __EKSHash__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 8:
                        __CreatedAt__ = formatterResolver.GetFormatterWithVerify<global::System.DateTime>().Deserialize(ref reader, options);
                        break;
                    case 9:
                        __UpdatedAt__ = formatterResolver.GetFormatterWithVerify<global::System.DateTime>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::AlienCell.Shared.Protocol.Models.AccountDTO();
            ____result.Id = __Id__;
            ____result.DeviceUId = __DeviceUId__;
            ____result.Name = __Name__;
            ____result.Email = __Email__;
            ____result.PasswordHash = __PasswordHash__;
            ____result.Phone = __Phone__;
            ____result.Address = __Address__;
            ____result.EKSHash = __EKSHash__;
            ____result.CreatedAt = __CreatedAt__;
            ____result.UpdatedAt = __UpdatedAt__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ArtifactModelDTOFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::AlienCell.Shared.Protocol.Models.ArtifactModelDTO>
    {


        private readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        private readonly byte[][] ____stringByteKeys;

        public ArtifactModelDTOFormatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
                { "Exp", 0 },
                { "Level", 1 },
                { "Data", 2 },
            };

            this.____stringByteKeys = new byte[][]
            {
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Exp"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Level"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Data"),
            };
        }

        public void Serialize(ref MessagePackWriter writer, global::AlienCell.Shared.Protocol.Models.ArtifactModelDTO value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteMapHeader(3);
            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.Write(value.Exp);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.Write(value.Level);
            writer.WriteRaw(this.____stringByteKeys[2]);
            writer.Write(value.Data);
        }

        public global::AlienCell.Shared.Protocol.Models.ArtifactModelDTO Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __Exp__ = default(ulong);
            var __Level__ = default(int);
            var __Data__ = default(int);

            for (int i = 0; i < length; i++)
            {
                ReadOnlySpan<byte> stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                int key;
                if (!this.____keyMapping.TryGetValue(stringKey, out key))
                {
                    reader.Skip();
                    continue;
                }

                switch (key)
                {
                    case 0:
                        __Exp__ = reader.ReadUInt64();
                        break;
                    case 1:
                        __Level__ = reader.ReadInt32();
                        break;
                    case 2:
                        __Data__ = reader.ReadInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::AlienCell.Shared.Protocol.Models.ArtifactModelDTO();
            ____result.Exp = __Exp__;
            ____result.Level = __Level__;
            ____result.Data = __Data__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class BuildingModelDTOFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::AlienCell.Shared.Protocol.Models.BuildingModelDTO>
    {


        private readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        private readonly byte[][] ____stringByteKeys;

        public BuildingModelDTOFormatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
                { "Level", 0 },
                { "Data", 1 },
            };

            this.____stringByteKeys = new byte[][]
            {
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Level"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Data"),
            };
        }

        public void Serialize(ref MessagePackWriter writer, global::AlienCell.Shared.Protocol.Models.BuildingModelDTO value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteMapHeader(2);
            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.Write(value.Level);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.Write(value.Data);
        }

        public global::AlienCell.Shared.Protocol.Models.BuildingModelDTO Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __Level__ = default(int);
            var __Data__ = default(int);

            for (int i = 0; i < length; i++)
            {
                ReadOnlySpan<byte> stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                int key;
                if (!this.____keyMapping.TryGetValue(stringKey, out key))
                {
                    reader.Skip();
                    continue;
                }

                switch (key)
                {
                    case 0:
                        __Level__ = reader.ReadInt32();
                        break;
                    case 1:
                        __Data__ = reader.ReadInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::AlienCell.Shared.Protocol.Models.BuildingModelDTO();
            ____result.Level = __Level__;
            ____result.Data = __Data__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class HeroModelDTOFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::AlienCell.Shared.Protocol.Models.HeroModelDTO>
    {


        private readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        private readonly byte[][] ____stringByteKeys;

        public HeroModelDTOFormatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
                { "Exp", 0 },
                { "Level", 1 },
                { "Data", 2 },
            };

            this.____stringByteKeys = new byte[][]
            {
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Exp"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Level"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Data"),
            };
        }

        public void Serialize(ref MessagePackWriter writer, global::AlienCell.Shared.Protocol.Models.HeroModelDTO value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteMapHeader(3);
            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.Write(value.Exp);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.Write(value.Level);
            writer.WriteRaw(this.____stringByteKeys[2]);
            writer.Write(value.Data);
        }

        public global::AlienCell.Shared.Protocol.Models.HeroModelDTO Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __Exp__ = default(ulong);
            var __Level__ = default(int);
            var __Data__ = default(int);

            for (int i = 0; i < length; i++)
            {
                ReadOnlySpan<byte> stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                int key;
                if (!this.____keyMapping.TryGetValue(stringKey, out key))
                {
                    reader.Skip();
                    continue;
                }

                switch (key)
                {
                    case 0:
                        __Exp__ = reader.ReadUInt64();
                        break;
                    case 1:
                        __Level__ = reader.ReadInt32();
                        break;
                    case 2:
                        __Data__ = reader.ReadInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::AlienCell.Shared.Protocol.Models.HeroModelDTO();
            ____result.Exp = __Exp__;
            ____result.Level = __Level__;
            ____result.Data = __Data__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class UserModelDTOFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::AlienCell.Shared.Protocol.Models.UserModelDTO>
    {


        private readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        private readonly byte[][] ____stringByteKeys;

        public UserModelDTOFormatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
                { "Exp", 0 },
                { "Level", 1 },
                { "Buildings", 2 },
                { "Heroes", 3 },
                { "Weapons", 4 },
                { "Artifacts", 5 },
            };

            this.____stringByteKeys = new byte[][]
            {
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Exp"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Level"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Buildings"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Heroes"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Weapons"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Artifacts"),
            };
        }

        public void Serialize(ref MessagePackWriter writer, global::AlienCell.Shared.Protocol.Models.UserModelDTO value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteMapHeader(6);
            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.Write(value.Exp);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.Write(value.Level);
            writer.WriteRaw(this.____stringByteKeys[2]);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::AlienCell.Shared.Protocol.Models.BuildingModelDTO>>().Serialize(ref writer, value.Buildings, options);
            writer.WriteRaw(this.____stringByteKeys[3]);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::AlienCell.Shared.Protocol.Models.HeroModelDTO>>().Serialize(ref writer, value.Heroes, options);
            writer.WriteRaw(this.____stringByteKeys[4]);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::AlienCell.Shared.Protocol.Models.WeaponModelDTO>>().Serialize(ref writer, value.Weapons, options);
            writer.WriteRaw(this.____stringByteKeys[5]);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::AlienCell.Shared.Protocol.Models.ArtifactModelDTO>>().Serialize(ref writer, value.Artifacts, options);
        }

        public global::AlienCell.Shared.Protocol.Models.UserModelDTO Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __Exp__ = default(int);
            var __Level__ = default(int);
            var __Buildings__ = default(global::System.Collections.Generic.List<global::AlienCell.Shared.Protocol.Models.BuildingModelDTO>);
            var __Heroes__ = default(global::System.Collections.Generic.List<global::AlienCell.Shared.Protocol.Models.HeroModelDTO>);
            var __Weapons__ = default(global::System.Collections.Generic.List<global::AlienCell.Shared.Protocol.Models.WeaponModelDTO>);
            var __Artifacts__ = default(global::System.Collections.Generic.List<global::AlienCell.Shared.Protocol.Models.ArtifactModelDTO>);

            for (int i = 0; i < length; i++)
            {
                ReadOnlySpan<byte> stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                int key;
                if (!this.____keyMapping.TryGetValue(stringKey, out key))
                {
                    reader.Skip();
                    continue;
                }

                switch (key)
                {
                    case 0:
                        __Exp__ = reader.ReadInt32();
                        break;
                    case 1:
                        __Level__ = reader.ReadInt32();
                        break;
                    case 2:
                        __Buildings__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::AlienCell.Shared.Protocol.Models.BuildingModelDTO>>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __Heroes__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::AlienCell.Shared.Protocol.Models.HeroModelDTO>>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __Weapons__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::AlienCell.Shared.Protocol.Models.WeaponModelDTO>>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        __Artifacts__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::AlienCell.Shared.Protocol.Models.ArtifactModelDTO>>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::AlienCell.Shared.Protocol.Models.UserModelDTO();
            ____result.Exp = __Exp__;
            ____result.Level = __Level__;
            ____result.Buildings = __Buildings__;
            ____result.Heroes = __Heroes__;
            ____result.Weapons = __Weapons__;
            ____result.Artifacts = __Artifacts__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class WeaponModelDTOFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::AlienCell.Shared.Protocol.Models.WeaponModelDTO>
    {


        private readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        private readonly byte[][] ____stringByteKeys;

        public WeaponModelDTOFormatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
                { "Exp", 0 },
                { "Level", 1 },
                { "Data", 2 },
            };

            this.____stringByteKeys = new byte[][]
            {
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Exp"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Level"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Data"),
            };
        }

        public void Serialize(ref MessagePackWriter writer, global::AlienCell.Shared.Protocol.Models.WeaponModelDTO value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteMapHeader(3);
            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.Write(value.Exp);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.Write(value.Level);
            writer.WriteRaw(this.____stringByteKeys[2]);
            writer.Write(value.Data);
        }

        public global::AlienCell.Shared.Protocol.Models.WeaponModelDTO Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __Exp__ = default(ulong);
            var __Level__ = default(int);
            var __Data__ = default(int);

            for (int i = 0; i < length; i++)
            {
                ReadOnlySpan<byte> stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                int key;
                if (!this.____keyMapping.TryGetValue(stringKey, out key))
                {
                    reader.Skip();
                    continue;
                }

                switch (key)
                {
                    case 0:
                        __Exp__ = reader.ReadUInt64();
                        break;
                    case 1:
                        __Level__ = reader.ReadInt32();
                        break;
                    case 2:
                        __Data__ = reader.ReadInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::AlienCell.Shared.Protocol.Models.WeaponModelDTO();
            ____result.Exp = __Exp__;
            ____result.Level = __Level__;
            ____result.Data = __Data__;
            reader.Depth--;
            return ____result;
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.AlienCell.Shared.Structs
{
    using System;
    using System.Buffers;
    using MessagePack;

    public sealed class ArtifactLevelLadderDataFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::AlienCell.Shared.Structs.ArtifactLevelLadderData>
    {


        private readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        private readonly byte[][] ____stringByteKeys;

        public ArtifactLevelLadderDataFormatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
                { "Experience", 0 },
            };

            this.____stringByteKeys = new byte[][]
            {
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Experience"),
            };
        }

        public void Serialize(ref MessagePackWriter writer, global::AlienCell.Shared.Structs.ArtifactLevelLadderData value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteMapHeader(1);
            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.Write(value.Experience);
        }

        public global::AlienCell.Shared.Structs.ArtifactLevelLadderData Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __Experience__ = default(ulong);

            for (int i = 0; i < length; i++)
            {
                ReadOnlySpan<byte> stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                int key;
                if (!this.____keyMapping.TryGetValue(stringKey, out key))
                {
                    reader.Skip();
                    continue;
                }

                switch (key)
                {
                    case 0:
                        __Experience__ = reader.ReadUInt64();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::AlienCell.Shared.Structs.ArtifactLevelLadderData();
            ____result.Experience = __Experience__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class CostArtifactFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::AlienCell.Shared.Structs.CostArtifact>
    {


        private readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        private readonly byte[][] ____stringByteKeys;

        public CostArtifactFormatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
                { "Conditions", 0 },
            };

            this.____stringByteKeys = new byte[][]
            {
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Conditions"),
            };
        }

        public void Serialize(ref MessagePackWriter writer, global::AlienCell.Shared.Structs.CostArtifact value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteMapHeader(1);
            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<string>>().Serialize(ref writer, value.Conditions, options);
        }

        public global::AlienCell.Shared.Structs.CostArtifact Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __Conditions__ = default(global::System.Collections.Generic.List<string>);

            for (int i = 0; i < length; i++)
            {
                ReadOnlySpan<byte> stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                int key;
                if (!this.____keyMapping.TryGetValue(stringKey, out key))
                {
                    reader.Skip();
                    continue;
                }

                switch (key)
                {
                    case 0:
                        __Conditions__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<string>>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::AlienCell.Shared.Structs.CostArtifact();
            ____result.Conditions = __Conditions__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class CostBuildingFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::AlienCell.Shared.Structs.CostBuilding>
    {


        private readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        private readonly byte[][] ____stringByteKeys;

        public CostBuildingFormatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
                { "Conditions", 0 },
            };

            this.____stringByteKeys = new byte[][]
            {
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Conditions"),
            };
        }

        public void Serialize(ref MessagePackWriter writer, global::AlienCell.Shared.Structs.CostBuilding value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteMapHeader(1);
            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<string>>().Serialize(ref writer, value.Conditions, options);
        }

        public global::AlienCell.Shared.Structs.CostBuilding Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __Conditions__ = default(global::System.Collections.Generic.List<string>);

            for (int i = 0; i < length; i++)
            {
                ReadOnlySpan<byte> stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                int key;
                if (!this.____keyMapping.TryGetValue(stringKey, out key))
                {
                    reader.Skip();
                    continue;
                }

                switch (key)
                {
                    case 0:
                        __Conditions__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<string>>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::AlienCell.Shared.Structs.CostBuilding();
            ____result.Conditions = __Conditions__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class CostHeroFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::AlienCell.Shared.Structs.CostHero>
    {


        private readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        private readonly byte[][] ____stringByteKeys;

        public CostHeroFormatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
                { "Conditions", 0 },
            };

            this.____stringByteKeys = new byte[][]
            {
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Conditions"),
            };
        }

        public void Serialize(ref MessagePackWriter writer, global::AlienCell.Shared.Structs.CostHero value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteMapHeader(1);
            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<string>>().Serialize(ref writer, value.Conditions, options);
        }

        public global::AlienCell.Shared.Structs.CostHero Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __Conditions__ = default(global::System.Collections.Generic.List<string>);

            for (int i = 0; i < length; i++)
            {
                ReadOnlySpan<byte> stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                int key;
                if (!this.____keyMapping.TryGetValue(stringKey, out key))
                {
                    reader.Skip();
                    continue;
                }

                switch (key)
                {
                    case 0:
                        __Conditions__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<string>>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::AlienCell.Shared.Structs.CostHero();
            ____result.Conditions = __Conditions__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class CostWeaponFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::AlienCell.Shared.Structs.CostWeapon>
    {


        private readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        private readonly byte[][] ____stringByteKeys;

        public CostWeaponFormatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
                { "Conditions", 0 },
            };

            this.____stringByteKeys = new byte[][]
            {
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Conditions"),
            };
        }

        public void Serialize(ref MessagePackWriter writer, global::AlienCell.Shared.Structs.CostWeapon value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteMapHeader(1);
            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<string>>().Serialize(ref writer, value.Conditions, options);
        }

        public global::AlienCell.Shared.Structs.CostWeapon Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __Conditions__ = default(global::System.Collections.Generic.List<string>);

            for (int i = 0; i < length; i++)
            {
                ReadOnlySpan<byte> stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                int key;
                if (!this.____keyMapping.TryGetValue(stringKey, out key))
                {
                    reader.Skip();
                    continue;
                }

                switch (key)
                {
                    case 0:
                        __Conditions__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<string>>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::AlienCell.Shared.Structs.CostWeapon();
            ____result.Conditions = __Conditions__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class HeroLevelLadderDataFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::AlienCell.Shared.Structs.HeroLevelLadderData>
    {


        private readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        private readonly byte[][] ____stringByteKeys;

        public HeroLevelLadderDataFormatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
                { "Experience", 0 },
            };

            this.____stringByteKeys = new byte[][]
            {
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Experience"),
            };
        }

        public void Serialize(ref MessagePackWriter writer, global::AlienCell.Shared.Structs.HeroLevelLadderData value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteMapHeader(1);
            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.Write(value.Experience);
        }

        public global::AlienCell.Shared.Structs.HeroLevelLadderData Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __Experience__ = default(ulong);

            for (int i = 0; i < length; i++)
            {
                ReadOnlySpan<byte> stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                int key;
                if (!this.____keyMapping.TryGetValue(stringKey, out key))
                {
                    reader.Skip();
                    continue;
                }

                switch (key)
                {
                    case 0:
                        __Experience__ = reader.ReadUInt64();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::AlienCell.Shared.Structs.HeroLevelLadderData();
            ____result.Experience = __Experience__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class RewardArtifactFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::AlienCell.Shared.Structs.RewardArtifact>
    {


        private readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        private readonly byte[][] ____stringByteKeys;

        public RewardArtifactFormatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
                { "Artifact", 0 },
                { "Amount", 1 },
            };

            this.____stringByteKeys = new byte[][]
            {
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Artifact"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Amount"),
            };
        }

        public void Serialize(ref MessagePackWriter writer, global::AlienCell.Shared.Structs.RewardArtifact value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteMapHeader(2);
            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::AlienCell.Shared.Data.ArtifactData.Types>().Serialize(ref writer, value.Artifact, options);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.Write(value.Amount);
        }

        public global::AlienCell.Shared.Structs.RewardArtifact Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __Artifact__ = default(global::AlienCell.Shared.Data.ArtifactData.Types);
            var __Amount__ = default(int);

            for (int i = 0; i < length; i++)
            {
                ReadOnlySpan<byte> stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                int key;
                if (!this.____keyMapping.TryGetValue(stringKey, out key))
                {
                    reader.Skip();
                    continue;
                }

                switch (key)
                {
                    case 0:
                        __Artifact__ = formatterResolver.GetFormatterWithVerify<global::AlienCell.Shared.Data.ArtifactData.Types>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __Amount__ = reader.ReadInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::AlienCell.Shared.Structs.RewardArtifact();
            ____result.Artifact = __Artifact__;
            ____result.Amount = __Amount__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class RewardHeroFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::AlienCell.Shared.Structs.RewardHero>
    {


        private readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        private readonly byte[][] ____stringByteKeys;

        public RewardHeroFormatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
                { "Hero", 0 },
                { "Amount", 1 },
            };

            this.____stringByteKeys = new byte[][]
            {
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Hero"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Amount"),
            };
        }

        public void Serialize(ref MessagePackWriter writer, global::AlienCell.Shared.Structs.RewardHero value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteMapHeader(2);
            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::AlienCell.Shared.Data.HeroData.Types>().Serialize(ref writer, value.Hero, options);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.Write(value.Amount);
        }

        public global::AlienCell.Shared.Structs.RewardHero Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __Hero__ = default(global::AlienCell.Shared.Data.HeroData.Types);
            var __Amount__ = default(int);

            for (int i = 0; i < length; i++)
            {
                ReadOnlySpan<byte> stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                int key;
                if (!this.____keyMapping.TryGetValue(stringKey, out key))
                {
                    reader.Skip();
                    continue;
                }

                switch (key)
                {
                    case 0:
                        __Hero__ = formatterResolver.GetFormatterWithVerify<global::AlienCell.Shared.Data.HeroData.Types>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __Amount__ = reader.ReadInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::AlienCell.Shared.Structs.RewardHero();
            ____result.Hero = __Hero__;
            ____result.Amount = __Amount__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class RewardWeaponFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::AlienCell.Shared.Structs.RewardWeapon>
    {


        private readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        private readonly byte[][] ____stringByteKeys;

        public RewardWeaponFormatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
                { "Weapon", 0 },
                { "Amount", 1 },
            };

            this.____stringByteKeys = new byte[][]
            {
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Weapon"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Amount"),
            };
        }

        public void Serialize(ref MessagePackWriter writer, global::AlienCell.Shared.Structs.RewardWeapon value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteMapHeader(2);
            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::AlienCell.Shared.Data.WeaponData.Types>().Serialize(ref writer, value.Weapon, options);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.Write(value.Amount);
        }

        public global::AlienCell.Shared.Structs.RewardWeapon Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __Weapon__ = default(global::AlienCell.Shared.Data.WeaponData.Types);
            var __Amount__ = default(int);

            for (int i = 0; i < length; i++)
            {
                ReadOnlySpan<byte> stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                int key;
                if (!this.____keyMapping.TryGetValue(stringKey, out key))
                {
                    reader.Skip();
                    continue;
                }

                switch (key)
                {
                    case 0:
                        __Weapon__ = formatterResolver.GetFormatterWithVerify<global::AlienCell.Shared.Data.WeaponData.Types>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __Amount__ = reader.ReadInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::AlienCell.Shared.Structs.RewardWeapon();
            ____result.Weapon = __Weapon__;
            ____result.Amount = __Amount__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class SkillModelFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::AlienCell.Shared.Structs.SkillModel>
    {


        private readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        private readonly byte[][] ____stringByteKeys;

        public SkillModelFormatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
                { "Level", 0 },
                { "Data", 1 },
            };

            this.____stringByteKeys = new byte[][]
            {
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Level"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Data"),
            };
        }

        public void Serialize(ref MessagePackWriter writer, global::AlienCell.Shared.Structs.SkillModel value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteMapHeader(2);
            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.Write(value.Level);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<global::AlienCell.Shared.Data.SkillData.Types>().Serialize(ref writer, value.Data, options);
        }

        public global::AlienCell.Shared.Structs.SkillModel Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __Level__ = default(int);
            var __Data__ = default(global::AlienCell.Shared.Data.SkillData.Types);

            for (int i = 0; i < length; i++)
            {
                ReadOnlySpan<byte> stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                int key;
                if (!this.____keyMapping.TryGetValue(stringKey, out key))
                {
                    reader.Skip();
                    continue;
                }

                switch (key)
                {
                    case 0:
                        __Level__ = reader.ReadInt32();
                        break;
                    case 1:
                        __Data__ = formatterResolver.GetFormatterWithVerify<global::AlienCell.Shared.Data.SkillData.Types>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::AlienCell.Shared.Structs.SkillModel();
            ____result.Level = __Level__;
            ____result.Data = __Data__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class WeaponLevelLadderDataFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::AlienCell.Shared.Structs.WeaponLevelLadderData>
    {


        private readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        private readonly byte[][] ____stringByteKeys;

        public WeaponLevelLadderDataFormatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
                { "Experience", 0 },
            };

            this.____stringByteKeys = new byte[][]
            {
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Experience"),
            };
        }

        public void Serialize(ref MessagePackWriter writer, global::AlienCell.Shared.Structs.WeaponLevelLadderData value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteMapHeader(1);
            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.Write(value.Experience);
        }

        public global::AlienCell.Shared.Structs.WeaponLevelLadderData Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __Experience__ = default(ulong);

            for (int i = 0; i < length; i++)
            {
                ReadOnlySpan<byte> stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                int key;
                if (!this.____keyMapping.TryGetValue(stringKey, out key))
                {
                    reader.Skip();
                    continue;
                }

                switch (key)
                {
                    case 0:
                        __Experience__ = reader.ReadUInt64();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::AlienCell.Shared.Structs.WeaponLevelLadderData();
            ____result.Experience = __Experience__;
            reader.Depth--;
            return ____result;
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

